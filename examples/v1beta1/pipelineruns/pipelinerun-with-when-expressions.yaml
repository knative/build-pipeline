apiVersion: tekton.dev/v1beta1
kind: PipelineRun
metadata:
  generateName: guarded-pr-
spec:
  serviceAccountName: 'default'
  pipelineSpec:
    params:
    - name: path
      type: string
      description: The path of the file to be created
    workspaces:
    - name: source
      description: |
        This workspace will receive the cloned git repo and be passed
        to the next Task to create a file
    tasks:
    - name: create-file # when expression using parameter, evaluates to true
      when:
      - input: "$(params.path)"
        operator: in
        values: ["README.md"]
      workspaces:
      - name: source
        workspace: source
      taskSpec:
        workspaces:
        - name: source
          description: The workspace to create the readme file in
        steps:
        - name: write-new-stuff
          image: ubuntu
          script: 'touch $(workspaces.source.path)/README.md'
    - name: check-file
      params:
      - name: path
        value: "$(params.path)"
      workspaces:
      - name: source
        workspace: source
      runAfter:
      - create-file
      taskSpec:
        params:
        - name: path
        workspaces:
        - name: source
          description: The workspace to check for the file
        results:
        - name: exists
          description: indicates whether the file exists or is missing
        steps:
        - name: check-file
          image: alpine
          script: |
            if test -f $(workspaces.source.path)/$(params.path); then
              printf yes | tee /tekton/results/exists
            else
              printf no | tee /tekton/results/exists
            fi
    - name: echo-file-exists # when expression using task result, evaluates to true
      when:
      - input: "$(tasks.check-file.results.exists)"
        operator: in
        values: ["yes"]
      taskSpec:
        steps:
        - name: echo
          image: ubuntu
          script: 'echo file exists'
    - name: task-should-be-skipped-1
      when:
      - input: "$(tasks.check-file.results.exists)" # when expression using task result, evaluates to false
        operator: in
        values: ["missing"]
      taskSpec:
        steps:
        - name: echo
          image: ubuntu
          script: exit 1
    - name: task-should-be-skipped-2 # when expression using parameter, evaluates to false
      when:
      - input: "$(params.path)"
        operator: notin
        values: ["README.md"]
      taskSpec:
        steps:
        - name: echo
          image: ubuntu
          script: exit 1
  params:
  - name: path
    value: README.md
  workspaces:
  - name: source
    volumeClaimTemplate:
      spec:
        accessModes:
        - ReadWriteOnce
        resources:
          requests:
            storage: 1Gi
