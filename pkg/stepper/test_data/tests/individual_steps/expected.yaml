apiVersion: tekton.dev/v1beta1
kind: PipelineRun
metadata:
  creationTimestamp: null
  generateName: my-pipeline-
spec:
  pipelineSpec:
    params:
    - description: git url to clone
      name: url
      type: string
    - default: ""
      description: git revision to checkout (branch, tag, sha, ref…)
      name: revision
      type: string
    - default: ""
      description: (optional) git refspec to fetch before checking out revision
      name: refspec
      type: string
    - default: "true"
      description: defines if the resource should initialize and fetch the submodules
      name: submodules
      type: string
    - default: "1"
      description: performs a shallow clone where only the most recent commit(s) will
        be fetched
      name: depth
      type: string
    - default: "true"
      description: defines if http.sslVerify should be set to true or false in the
        global git config
      name: sslVerify
      type: string
    - default: ""
      description: subdirectory inside the "output" workspace to clone the git repo
        into
      name: subdirectory
      type: string
    - default: "true"
      description: clean out the contents of the repo's destination directory (if
        it already exists) before trying to clone the repo there
      name: deleteExisting
      type: string
    - default: ""
      description: git HTTP proxy server for non-SSL requests
      name: httpProxy
      type: string
    - default: ""
      description: git HTTPS proxy server for SSL requests
      name: httpsProxy
      type: string
    - default: ""
      description: git no proxy - opt out of proxying HTTP/HTTPS requests
      name: noProxy
      type: string
    - default: "true"
      description: log the commands used during execution
      name: verbose
      type: string
    - default: gcr.io/tekton-releases/github.com/tektoncd/pipeline/cmd/git-init:v0.18.1
      description: the image used where the git-init binary is
      name: gitInitImage
      type: string
    results:
    - description: The precise commit SHA that was fetched by this Task
      name: commit
      value: ""
    - description: The precise URL that was fetched by this Task
      name: url
      value: ""
    tasks:
    - name: mytask
      taskSpec:
        metadata: {}
        params:
        - description: git url to clone
          name: url
          type: string
        - default: ""
          description: git revision to checkout (branch, tag, sha, ref…)
          name: revision
          type: string
        - default: ""
          description: (optional) git refspec to fetch before checking out revision
          name: refspec
          type: string
        - default: "true"
          description: defines if the resource should initialize and fetch the submodules
          name: submodules
          type: string
        - default: "1"
          description: performs a shallow clone where only the most recent commit(s)
            will be fetched
          name: depth
          type: string
        - default: "true"
          description: defines if http.sslVerify should be set to true or false in
            the global git config
          name: sslVerify
          type: string
        - default: ""
          description: subdirectory inside the "output" workspace to clone the git
            repo into
          name: subdirectory
          type: string
        - default: "true"
          description: clean out the contents of the repo's destination directory
            (if it already exists) before trying to clone the repo there
          name: deleteExisting
          type: string
        - default: ""
          description: git HTTP proxy server for non-SSL requests
          name: httpProxy
          type: string
        - default: ""
          description: git HTTPS proxy server for SSL requests
          name: httpsProxy
          type: string
        - default: ""
          description: git no proxy - opt out of proxying HTTP/HTTPS requests
          name: noProxy
          type: string
        - default: "true"
          description: log the commands used during execution
          name: verbose
          type: string
        - default: gcr.io/tekton-releases/github.com/tektoncd/pipeline/cmd/git-init:v0.18.1
          description: the image used where the git-init binary is
          name: gitInitImage
          type: string
        results:
        - description: The precise commit SHA that was fetched by this Task
          name: commit
        - description: The precise URL that was fetched by this Task
          name: url
        steps:
        - image: $(params.gitInitImage)
          name: clone
          resources: {}
          script: |-
            #!/bin/sh
            set -eu -o pipefail

            if [[ "$(params.verbose)" == "true" ]] ; then
              set -x
            fi

            CHECKOUT_DIR="$(workspaces.output.path)/$(params.subdirectory)"

            cleandir() {
              # Delete any existing contents of the repo directory if it exists.
              #
              # We don't just "rm -rf $CHECKOUT_DIR" because $CHECKOUT_DIR might be "/"
              # or the root of a mounted volume.
              if [[ -d "$CHECKOUT_DIR" ]] ; then
                # Delete non-hidden files and directories
                rm -rf "$CHECKOUT_DIR"/*
                # Delete files and directories starting with . but excluding ..
                rm -rf "$CHECKOUT_DIR"/.[!.]*
                # Delete files and directories starting with .. plus any other character
                rm -rf "$CHECKOUT_DIR"/..?*
              fi
            }

            if [[ "$(params.deleteExisting)" == "true" ]] ; then
              cleandir
            fi

            test -z "$(params.httpProxy)" || export HTTP_PROXY=$(params.httpProxy)
            test -z "$(params.httpsProxy)" || export HTTPS_PROXY=$(params.httpsProxy)
            test -z "$(params.noProxy)" || export NO_PROXY=$(params.noProxy)

            /ko-app/git-init \
              -url "$(params.url)" \
              -revision "$(params.revision)" \
              -refspec "$(params.refspec)" \
              -path "$CHECKOUT_DIR" \
              -sslVerify="$(params.sslVerify)" \
              -submodules="$(params.submodules)" \
              -depth "$(params.depth)"
            cd "$CHECKOUT_DIR"
            RESULT_SHA="$(git rev-parse HEAD)"
            EXIT_CODE="$?"
            if [ "$EXIT_CODE" != 0 ] ; then
              exit $EXIT_CODE
            fi
            # ensure we don't add a trailing newline to the result
            echo -n "$RESULT_SHA" > $(results.commit.path)
            echo -n "$(params.url)" > $(results.url.path)
        - image: gcr.io/jenkinsxio/jx-release-version:2.2.3
          name: next-version
          resources: {}
          script: |
            #!/usr/bin/env sh
            jx-release-version > VERSION
        - image: ghcr.io/jenkins-x/jx-boot:3.1.285
          name: jx-variables
          resources: {}
          script: |
            #!/usr/bin/env sh
            jx gitops variables
        - image: golang:1.15
          name: build-make-build
          resources: {}
          script: |
            #!/bin/sh
            make build
        - command:
          - sh
          - -c
          - echo hello world
          image: golang:1.15
          name: my-custom-step
          resources: {}
        - image: gcr.io/jenkinsxio/jx-registry:0.0.11
          name: check-registry
          resources: {}
        - image: gcr.io/kaniko-project/executor:debug-v1.3.0
          name: build-container-build
          resources: {}
          script: |
            #!/busybox/sh
            source .jx/variables.sh
            cp /tekton/creds-secrets/tekton-container-registry-auth/.dockerconfigjson /kaniko/.docker/config.json
            /kaniko/executor $KANIKO_FLAGS --context=/workspace/source --dockerfile=Dockerfile --destination=$DOCKER_REGISTRY/$DOCKER_REGISTRY_ORG/$APP_NAME:$VERSION
        - image: gcr.io/jenkinsxio/jx-changelog:0.0.34
          name: promote-changelog
          resources: {}
          script: |
            #!/usr/bin/env sh
            source .jx/variables.sh

            if [ -d "charts/$REPO_NAME" ]; then
            sed -i -e "s/^version:.*/version: $VERSION/" ./charts/$REPO_NAME/Chart.yaml
            sed -i -e "s/repository:.*/repository: $DOCKER_REGISTRY\/$DOCKER_REGISTRY_ORG\/$APP_NAME/" ./charts/$REPO_NAME/values.yaml
            sed -i -e "s/tag:.*/tag: $VERSION/" ./charts/$REPO_NAME/values.yaml;
            else echo no charts; fi

            git add * || true
            git commit -a -m "chore: release $VERSION" --allow-empty
            git tag -fa v$VERSION -m "Release version $VERSION"
            git push --force origin v$VERSION

            jx changelog create --version v${VERSION}
        - image: ghcr.io/jenkins-x/jx-boot:3.1.285
          name: promote-helm-release
          resources: {}
          script: |
            #!/usr/bin/env sh
            jx gitops helm release
        - image: ghcr.io/jenkins-x/jx-promote:0.0.240
          name: promote-jx-promote
          resources: {}
          script: |
            #!/usr/bin/env sh
            source .jx/variables.sh
            jx promote -b --all --timeout 1h --no-poll
        workspaces:
        - description: The git repo will be cloned onto the volume backing this workspace
          name: output
    workspaces:
    - description: The git repo will be cloned onto the volume backing this workspace
      name: output
  serviceAccountName: default
status: {}
