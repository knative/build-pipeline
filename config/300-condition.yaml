# Copyright 2019 The Tekton Authors
#
# Licensed under the Apache License, Version 2.0 (the "License");
# you may not use this file except in compliance with the License.
# You may obtain a copy of the License at
#
#     https://www.apache.org/licenses/LICENSE-2.0
#
# Unless required by applicable law or agreed to in writing, software
# distributed under the License is distributed on an "AS IS" BASIS,
# WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
# See the License for the specific language governing permissions and
# limitations under the License.
apiVersion: apiextensions.k8s.io/v1beta1
kind: CustomResourceDefinition
metadata:
  name: conditions.tekton.dev
spec:
  group: tekton.dev
  names:
    kind: Condition
    plural: conditions
    categories:
    - all
    - tekton-pipelines
  scope: Namespaced
  # Opt into the status subresource so metadata.generation
  # starts to increment
  subresources:
    status: {}
  version: v1alpha1
  "validation":
    "openAPIV3Schema":
      description: Condition declares a step that is used to gate the execution of
        a Task in a Pipeline. A condition execution (ConditionCheck) evaluates to
        either true or false
      type: object
      properties:
        apiVersion:
          description: 'APIVersion defines the versioned schema of this representation
            of an object. Servers should convert recognized schemas to the latest
            internal value, and may reject unrecognized values. More info: https://git.k8s.io/community/contributors/devel/api-conventions.md#resources'
          type: string
        kind:
          description: 'Kind is a string value representing the REST resource this
            object represents. Servers may infer this from the endpoint the client
            submits requests to. Cannot be updated. In CamelCase. More info: https://git.k8s.io/community/contributors/devel/api-conventions.md#types-kinds'
          type: string
        metadata:
          type: object
        spec:
          description: Spec holds the desired state of the Condition from the client
          type: object
          properties:
            check:
              description: Check declares container whose exit code determines where
                a condition is true or false
              type: object
              required:
              - name
              properties:
                args:
                  description: 'Arguments to the entrypoint. The docker image''s CMD
                    is used if this is not provided. Variable references $(VAR_NAME)
                    are expanded using the container''s environment. If a variable
                    cannot be resolved, the reference in the input string will be
                    unchanged. The $(VAR_NAME) syntax can be escaped with a double
                    $$, ie: $$(VAR_NAME). Escaped references will never be expanded,
                    regardless of whether the variable exists or not. Cannot be updated.
                    More info: https://kubernetes.io/docs/tasks/inject-data-application/define-command-argument-container/#running-a-command-in-a-shell'
                  type: array
                  items:
                    type: string
                command:
                  description: 'Entrypoint array. Not executed within a shell. The
                    docker image''s ENTRYPOINT is used if this is not provided. Variable
                    references $(VAR_NAME) are expanded using the container''s environment.
                    If a variable cannot be resolved, the reference in the input string
                    will be unchanged. The $(VAR_NAME) syntax can be escaped with
                    a double $$, ie: $$(VAR_NAME). Escaped references will never be
                    expanded, regardless of whether the variable exists or not. Cannot
                    be updated. More info: https://kubernetes.io/docs/tasks/inject-data-application/define-command-argument-container/#running-a-command-in-a-shell'
                  type: array
                  items:
                    type: string
                env:
                  description: List of environment variables to set in the container.
                    Cannot be updated.
                  type: array
                  items:
                    description: EnvVar represents an environment variable present
                      in a Container.
                    type: object
                    required:
                    - name
                    properties:
                      name:
                        description: Name of the environment variable. Must be a C_IDENTIFIER.
                        type: string
                      value:
                        description: 'Variable references $(VAR_NAME) are expanded
                          using the previous defined environment variables in the
                          container and any service environment variables. If a variable
                          cannot be resolved, the reference in the input string will
                          be unchanged. The $(VAR_NAME) syntax can be escaped with
                          a double $$, ie: $$(VAR_NAME). Escaped references will never
                          be expanded, regardless of whether the variable exists or
                          not. Defaults to "".'
                        type: string
                      valueFrom:
                        description: Source for the environment variable's value.
                          Cannot be used if value is not empty.
                        type: object
                        properties:
                          configMapKeyRef:
                            description: Selects a key of a ConfigMap.
                            type: object
                            required:
                            - key
                            properties:
                              key:
                                description: The key to select.
                                type: string
                              name:
                                description: 'Name of the referent. More info: https://kubernetes.io/docs/concepts/overview/working-with-objects/names/#names
                                  TODO: Add other useful fields. apiVersion, kind,
                                  uid?'
                                type: string
                              optional:
                                description: Specify whether the ConfigMap or it's
                                  key must be defined
                                type: boolean
                          fieldRef:
                            description: 'Selects a field of the pod: supports metadata.name,
                              metadata.namespace, metadata.labels, metadata.annotations,
                              spec.nodeName, spec.serviceAccountName, status.hostIP,
                              status.podIP.'
                            type: object
                            required:
                            - fieldPath
                            properties:
                              apiVersion:
                                description: Version of the schema the FieldPath is
                                  written in terms of, defaults to "v1".
                                type: string
                              fieldPath:
                                description: Path of the field to select in the specified
                                  API version.
                                type: string
                          resourceFieldRef:
                            description: 'Selects a resource of the container: only
                              resources limits and requests (limits.cpu, limits.memory,
                              limits.ephemeral-storage, requests.cpu, requests.memory
                              and requests.ephemeral-storage) are currently supported.'
                            type: object
                            required:
                            - resource
                            properties:
                              containerName:
                                description: 'Container name: required for volumes,
                                  optional for env vars'
                                type: string
                              divisor:
                                description: Specifies the output format of the exposed
                                  resources, defaults to "1"
                                type: string
                              resource:
                                description: 'Required: resource to select'
                                type: string
                          secretKeyRef:
                            description: Selects a key of a secret in the pod's namespace
                            type: object
                            required:
                            - key
                            properties:
                              key:
                                description: The key of the secret to select from.  Must
                                  be a valid secret key.
                                type: string
                              name:
                                description: 'Name of the referent. More info: https://kubernetes.io/docs/concepts/overview/working-with-objects/names/#names
                                  TODO: Add other useful fields. apiVersion, kind,
                                  uid?'
                                type: string
                              optional:
                                description: Specify whether the Secret or it's key
                                  must be defined
                                type: boolean
                envFrom:
                  description: List of sources to populate environment variables in
                    the container. The keys defined within a source must be a C_IDENTIFIER.
                    All invalid keys will be reported as an event when the container
                    is starting. When a key exists in multiple sources, the value
                    associated with the last source will take precedence. Values defined
                    by an Env with a duplicate key will take precedence. Cannot be
                    updated.
                  type: array
                  items:
                    description: EnvFromSource represents the source of a set of ConfigMaps
                    type: object
                    properties:
                      configMapRef:
                        description: The ConfigMap to select from
                        type: object
                        properties:
                          name:
                            description: 'Name of the referent. More info: https://kubernetes.io/docs/concepts/overview/working-with-objects/names/#names
                              TODO: Add other useful fields. apiVersion, kind, uid?'
                            type: string
                          optional:
                            description: Specify whether the ConfigMap must be defined
                            type: boolean
                      prefix:
                        description: An optional identifier to prepend to each key
                          in the ConfigMap. Must be a C_IDENTIFIER.
                        type: string
                      secretRef:
                        description: The Secret to select from
                        type: object
                        properties:
                          name:
                            description: 'Name of the referent. More info: https://kubernetes.io/docs/concepts/overview/working-with-objects/names/#names
                              TODO: Add other useful fields. apiVersion, kind, uid?'
                            type: string
                          optional:
                            description: Specify whether the Secret must be defined
                            type: boolean
                image:
                  description: 'Docker image name. More info: https://kubernetes.io/docs/concepts/containers/images
                    This field is optional to allow higher level config management
                    to default or override container images in workload controllers
                    like Deployments and StatefulSets.'
                  type: string
                imagePullPolicy:
                  description: 'Image pull policy. One of Always, Never, IfNotPresent.
                    Defaults to Always if :latest tag is specified, or IfNotPresent
                    otherwise. Cannot be updated. More info: https://kubernetes.io/docs/concepts/containers/images#updating-images'
                  type: string
                lifecycle:
                  description: Actions that the management system should take in response
                    to container lifecycle events. Cannot be updated.
                  type: object
                  properties:
                    postStart:
                      description: 'PostStart is called immediately after a container
                        is created. If the handler fails, the container is terminated
                        and restarted according to its restart policy. Other management
                        of the container blocks until the hook completes. More info:
                        https://kubernetes.io/docs/concepts/containers/container-lifecycle-hooks/#container-hooks'
                      type: object
                      properties:
                        exec:
                          description: One and only one of the following should be
                            specified. Exec specifies the action to take.
                          type: object
                          properties:
                            command:
                              description: Command is the command line to execute
                                inside the container, the working directory for the
                                command  is root ('/') in the container's filesystem.
                                The command is simply exec'd, it is not run inside
                                a shell, so traditional shell instructions ('|', etc)
                                won't work. To use a shell, you need to explicitly
                                call out to that shell. Exit status of 0 is treated
                                as live/healthy and non-zero is unhealthy.
                              type: array
                              items:
                                type: string
                        httpGet:
                          description: HTTPGet specifies the http request to perform.
                          type: object
                          required:
                          - port
                          properties:
                            host:
                              description: Host name to connect to, defaults to the
                                pod IP. You probably want to set "Host" in httpHeaders
                                instead.
                              type: string
                            httpHeaders:
                              description: Custom headers to set in the request. HTTP
                                allows repeated headers.
                              type: array
                              items:
                                description: HTTPHeader describes a custom header
                                  to be used in HTTP probes
                                type: object
                                required:
                                - name
                                - value
                                properties:
                                  name:
                                    description: The header field name
                                    type: string
                                  value:
                                    description: The header field value
                                    type: string
                            path:
                              description: Path to access on the HTTP server.
                              type: string
                            port:
                              description: Name or number of the port to access on
                                the container. Number must be in the range 1 to 65535.
                                Name must be an IANA_SVC_NAME.
                              anyOf:
                              - type: integer
                              - type: string
                              x-kubernetes-int-or-string: true
                            scheme:
                              description: Scheme to use for connecting to the host.
                                Defaults to HTTP.
                              type: string
                        tcpSocket:
                          description: 'TCPSocket specifies an action involving a
                            TCP port. TCP hooks not yet supported TODO: implement
                            a realistic TCP lifecycle hook'
                          type: object
                          required:
                          - port
                          properties:
                            host:
                              description: 'Optional: Host name to connect to, defaults
                                to the pod IP.'
                              type: string
                            port:
                              description: Number or name of the port to access on
                                the container. Number must be in the range 1 to 65535.
                                Name must be an IANA_SVC_NAME.
                              anyOf:
                              - type: integer
                              - type: string
                              x-kubernetes-int-or-string: true
                    preStop:
                      description: 'PreStop is called immediately before a container
                        is terminated. The container is terminated after the handler
                        completes. The reason for termination is passed to the handler.
                        Regardless of the outcome of the handler, the container is
                        eventually terminated. Other management of the container blocks
                        until the hook completes. More info: https://kubernetes.io/docs/concepts/containers/container-lifecycle-hooks/#container-hooks'
                      type: object
                      properties:
                        exec:
                          description: One and only one of the following should be
                            specified. Exec specifies the action to take.
                          type: object
                          properties:
                            command:
                              description: Command is the command line to execute
                                inside the container, the working directory for the
                                command  is root ('/') in the container's filesystem.
                                The command is simply exec'd, it is not run inside
                                a shell, so traditional shell instructions ('|', etc)
                                won't work. To use a shell, you need to explicitly
                                call out to that shell. Exit status of 0 is treated
                                as live/healthy and non-zero is unhealthy.
                              type: array
                              items:
                                type: string
                        httpGet:
                          description: HTTPGet specifies the http request to perform.
                          type: object
                          required:
                          - port
                          properties:
                            host:
                              description: Host name to connect to, defaults to the
                                pod IP. You probably want to set "Host" in httpHeaders
                                instead.
                              type: string
                            httpHeaders:
                              description: Custom headers to set in the request. HTTP
                                allows repeated headers.
                              type: array
                              items:
                                description: HTTPHeader describes a custom header
                                  to be used in HTTP probes
                                type: object
                                required:
                                - name
                                - value
                                properties:
                                  name:
                                    description: The header field name
                                    type: string
                                  value:
                                    description: The header field value
                                    type: string
                            path:
                              description: Path to access on the HTTP server.
                              type: string
                            port:
                              description: Name or number of the port to access on
                                the container. Number must be in the range 1 to 65535.
                                Name must be an IANA_SVC_NAME.
                              anyOf:
                              - type: integer
                              - type: string
                              x-kubernetes-int-or-string: true
                            scheme:
                              description: Scheme to use for connecting to the host.
                                Defaults to HTTP.
                              type: string
                        tcpSocket:
                          description: 'TCPSocket specifies an action involving a
                            TCP port. TCP hooks not yet supported TODO: implement
                            a realistic TCP lifecycle hook'
                          type: object
                          required:
                          - port
                          properties:
                            host:
                              description: 'Optional: Host name to connect to, defaults
                                to the pod IP.'
                              type: string
                            port:
                              description: Number or name of the port to access on
                                the container. Number must be in the range 1 to 65535.
                                Name must be an IANA_SVC_NAME.
                              anyOf:
                              - type: integer
                              - type: string
                              x-kubernetes-int-or-string: true
                livenessProbe:
                  description: 'Periodic probe of container liveness. Container will
                    be restarted if the probe fails. Cannot be updated. More info:
                    https://kubernetes.io/docs/concepts/workloads/pods/pod-lifecycle#container-probes'
                  type: object
                  properties:
                    exec:
                      description: One and only one of the following should be specified.
                        Exec specifies the action to take.
                      type: object
                      properties:
                        command:
                          description: Command is the command line to execute inside
                            the container, the working directory for the command  is
                            root ('/') in the container's filesystem. The command
                            is simply exec'd, it is not run inside a shell, so traditional
                            shell instructions ('|', etc) won't work. To use a shell,
                            you need to explicitly call out to that shell. Exit status
                            of 0 is treated as live/healthy and non-zero is unhealthy.
                          type: array
                          items:
                            type: string
                    failureThreshold:
                      description: Minimum consecutive failures for the probe to be
                        considered failed after having succeeded. Defaults to 3. Minimum
                        value is 1.
                      type: integer
                      format: int32
                    httpGet:
                      description: HTTPGet specifies the http request to perform.
                      type: object
                      required:
                      - port
                      properties:
                        host:
                          description: Host name to connect to, defaults to the pod
                            IP. You probably want to set "Host" in httpHeaders instead.
                          type: string
                        httpHeaders:
                          description: Custom headers to set in the request. HTTP
                            allows repeated headers.
                          type: array
                          items:
                            description: HTTPHeader describes a custom header to be
                              used in HTTP probes
                            type: object
                            required:
                            - name
                            - value
                            properties:
                              name:
                                description: The header field name
                                type: string
                              value:
                                description: The header field value
                                type: string
                        path:
                          description: Path to access on the HTTP server.
                          type: string
                        port:
                          description: Name or number of the port to access on the
                            container. Number must be in the range 1 to 65535. Name
                            must be an IANA_SVC_NAME.
                          anyOf:
                          - type: integer
                          - type: string
                          x-kubernetes-int-or-string: true
                        scheme:
                          description: Scheme to use for connecting to the host. Defaults
                            to HTTP.
                          type: string
                    initialDelaySeconds:
                      description: 'Number of seconds after the container has started
                        before liveness probes are initiated. More info: https://kubernetes.io/docs/concepts/workloads/pods/pod-lifecycle#container-probes'
                      type: integer
                      format: int32
                    periodSeconds:
                      description: How often (in seconds) to perform the probe. Default
                        to 10 seconds. Minimum value is 1.
                      type: integer
                      format: int32
                    successThreshold:
                      description: Minimum consecutive successes for the probe to
                        be considered successful after having failed. Defaults to
                        1. Must be 1 for liveness. Minimum value is 1.
                      type: integer
                      format: int32
                    tcpSocket:
                      description: 'TCPSocket specifies an action involving a TCP
                        port. TCP hooks not yet supported TODO: implement a realistic
                        TCP lifecycle hook'
                      type: object
                      required:
                      - port
                      properties:
                        host:
                          description: 'Optional: Host name to connect to, defaults
                            to the pod IP.'
                          type: string
                        port:
                          description: Number or name of the port to access on the
                            container. Number must be in the range 1 to 65535. Name
                            must be an IANA_SVC_NAME.
                          anyOf:
                          - type: integer
                          - type: string
                          x-kubernetes-int-or-string: true
                    timeoutSeconds:
                      description: 'Number of seconds after which the probe times
                        out. Defaults to 1 second. Minimum value is 1. More info:
                        https://kubernetes.io/docs/concepts/workloads/pods/pod-lifecycle#container-probes'
                      type: integer
                      format: int32
                name:
                  description: Name of the container specified as a DNS_LABEL. Each
                    container in a pod must have a unique name (DNS_LABEL). Cannot
                    be updated.
                  type: string
                ports:
                  description: List of ports to expose from the container. Exposing
                    a port here gives the system additional information about the
                    network connections a container uses, but is primarily informational.
                    Not specifying a port here DOES NOT prevent that port from being
                    exposed. Any port which is listening on the default "0.0.0.0"
                    address inside a container will be accessible from the network.
                    Cannot be updated.
                  type: array
                  items:
                    description: ContainerPort represents a network port in a single
                      container.
                    type: object
                    required:
                    - containerPort
                    properties:
                      containerPort:
                        description: Number of port to expose on the pod's IP address.
                          This must be a valid port number, 0 < x < 65536.
                        type: integer
                        format: int32
                      hostIP:
                        description: What host IP to bind the external port to.
                        type: string
                      hostPort:
                        description: Number of port to expose on the host. If specified,
                          this must be a valid port number, 0 < x < 65536. If HostNetwork
                          is specified, this must match ContainerPort. Most containers
                          do not need this.
                        type: integer
                        format: int32
                      name:
                        description: If specified, this must be an IANA_SVC_NAME and
                          unique within the pod. Each named port in a pod must have
                          a unique name. Name for the port that can be referred to
                          by services.
                        type: string
                      protocol:
                        description: Protocol for port. Must be UDP, TCP, or SCTP.
                          Defaults to "TCP".
                        type: string
                readinessProbe:
                  description: 'Periodic probe of container service readiness. Container
                    will be removed from service endpoints if the probe fails. Cannot
                    be updated. More info: https://kubernetes.io/docs/concepts/workloads/pods/pod-lifecycle#container-probes'
                  type: object
                  properties:
                    exec:
                      description: One and only one of the following should be specified.
                        Exec specifies the action to take.
                      type: object
                      properties:
                        command:
                          description: Command is the command line to execute inside
                            the container, the working directory for the command  is
                            root ('/') in the container's filesystem. The command
                            is simply exec'd, it is not run inside a shell, so traditional
                            shell instructions ('|', etc) won't work. To use a shell,
                            you need to explicitly call out to that shell. Exit status
                            of 0 is treated as live/healthy and non-zero is unhealthy.
                          type: array
                          items:
                            type: string
                    failureThreshold:
                      description: Minimum consecutive failures for the probe to be
                        considered failed after having succeeded. Defaults to 3. Minimum
                        value is 1.
                      type: integer
                      format: int32
                    httpGet:
                      description: HTTPGet specifies the http request to perform.
                      type: object
                      required:
                      - port
                      properties:
                        host:
                          description: Host name to connect to, defaults to the pod
                            IP. You probably want to set "Host" in httpHeaders instead.
                          type: string
                        httpHeaders:
                          description: Custom headers to set in the request. HTTP
                            allows repeated headers.
                          type: array
                          items:
                            description: HTTPHeader describes a custom header to be
                              used in HTTP probes
                            type: object
                            required:
                            - name
                            - value
                            properties:
                              name:
                                description: The header field name
                                type: string
                              value:
                                description: The header field value
                                type: string
                        path:
                          description: Path to access on the HTTP server.
                          type: string
                        port:
                          description: Name or number of the port to access on the
                            container. Number must be in the range 1 to 65535. Name
                            must be an IANA_SVC_NAME.
                          anyOf:
                          - type: integer
                          - type: string
                          x-kubernetes-int-or-string: true
                        scheme:
                          description: Scheme to use for connecting to the host. Defaults
                            to HTTP.
                          type: string
                    initialDelaySeconds:
                      description: 'Number of seconds after the container has started
                        before liveness probes are initiated. More info: https://kubernetes.io/docs/concepts/workloads/pods/pod-lifecycle#container-probes'
                      type: integer
                      format: int32
                    periodSeconds:
                      description: How often (in seconds) to perform the probe. Default
                        to 10 seconds. Minimum value is 1.
                      type: integer
                      format: int32
                    successThreshold:
                      description: Minimum consecutive successes for the probe to
                        be considered successful after having failed. Defaults to
                        1. Must be 1 for liveness. Minimum value is 1.
                      type: integer
                      format: int32
                    tcpSocket:
                      description: 'TCPSocket specifies an action involving a TCP
                        port. TCP hooks not yet supported TODO: implement a realistic
                        TCP lifecycle hook'
                      type: object
                      required:
                      - port
                      properties:
                        host:
                          description: 'Optional: Host name to connect to, defaults
                            to the pod IP.'
                          type: string
                        port:
                          description: Number or name of the port to access on the
                            container. Number must be in the range 1 to 65535. Name
                            must be an IANA_SVC_NAME.
                          anyOf:
                          - type: integer
                          - type: string
                          x-kubernetes-int-or-string: true
                    timeoutSeconds:
                      description: 'Number of seconds after which the probe times
                        out. Defaults to 1 second. Minimum value is 1. More info:
                        https://kubernetes.io/docs/concepts/workloads/pods/pod-lifecycle#container-probes'
                      type: integer
                      format: int32
                resources:
                  description: 'Compute Resources required by this container. Cannot
                    be updated. More info: https://kubernetes.io/docs/concepts/configuration/manage-compute-resources-container/'
                  type: object
                  properties:
                    limits:
                      description: 'Limits describes the maximum amount of compute
                        resources allowed. More info: https://kubernetes.io/docs/concepts/configuration/manage-compute-resources-container/'
                      type: object
                      additionalProperties:
                        type: string
                    requests:
                      description: 'Requests describes the minimum amount of compute
                        resources required. If Requests is omitted for a container,
                        it defaults to Limits if that is explicitly specified, otherwise
                        to an implementation-defined value. More info: https://kubernetes.io/docs/concepts/configuration/manage-compute-resources-container/'
                      type: object
                      additionalProperties:
                        type: string
                securityContext:
                  description: 'Security options the pod should run with. More info:
                    https://kubernetes.io/docs/concepts/policy/security-context/ More
                    info: https://kubernetes.io/docs/tasks/configure-pod-container/security-context/'
                  type: object
                  properties:
                    allowPrivilegeEscalation:
                      description: 'AllowPrivilegeEscalation controls whether a process
                        can gain more privileges than its parent process. This bool
                        directly controls if the no_new_privs flag will be set on
                        the container process. AllowPrivilegeEscalation is true always
                        when the container is: 1) run as Privileged 2) has CAP_SYS_ADMIN'
                      type: boolean
                    capabilities:
                      description: The capabilities to add/drop when running containers.
                        Defaults to the default set of capabilities granted by the
                        container runtime.
                      type: object
                      properties:
                        add:
                          description: Added capabilities
                          type: array
                          items:
                            description: Capability represent POSIX capabilities type
                            type: string
                        drop:
                          description: Removed capabilities
                          type: array
                          items:
                            description: Capability represent POSIX capabilities type
                            type: string
                    privileged:
                      description: Run container in privileged mode. Processes in
                        privileged containers are essentially equivalent to root on
                        the host. Defaults to false.
                      type: boolean
                    procMount:
                      description: procMount denotes the type of proc mount to use
                        for the containers. The default is DefaultProcMount which
                        uses the container runtime defaults for readonly paths and
                        masked paths. This requires the ProcMountType feature flag
                        to be enabled.
                      type: string
                    readOnlyRootFilesystem:
                      description: Whether this container has a read-only root filesystem.
                        Default is false.
                      type: boolean
                    runAsGroup:
                      description: The GID to run the entrypoint of the container
                        process. Uses runtime default if unset. May also be set in
                        PodSecurityContext.  If set in both SecurityContext and PodSecurityContext,
                        the value specified in SecurityContext takes precedence.
                      type: integer
                      format: int64
                    runAsNonRoot:
                      description: Indicates that the container must run as a non-root
                        user. If true, the Kubelet will validate the image at runtime
                        to ensure that it does not run as UID 0 (root) and fail to
                        start the container if it does. If unset or false, no such
                        validation will be performed. May also be set in PodSecurityContext.  If
                        set in both SecurityContext and PodSecurityContext, the value
                        specified in SecurityContext takes precedence.
                      type: boolean
                    runAsUser:
                      description: The UID to run the entrypoint of the container
                        process. Defaults to user specified in image metadata if unspecified.
                        May also be set in PodSecurityContext.  If set in both SecurityContext
                        and PodSecurityContext, the value specified in SecurityContext
                        takes precedence.
                      type: integer
                      format: int64
                    seLinuxOptions:
                      description: The SELinux context to be applied to the container.
                        If unspecified, the container runtime will allocate a random
                        SELinux context for each container.  May also be set in PodSecurityContext.  If
                        set in both SecurityContext and PodSecurityContext, the value
                        specified in SecurityContext takes precedence.
                      type: object
                      properties:
                        level:
                          description: Level is SELinux level label that applies to
                            the container.
                          type: string
                        role:
                          description: Role is a SELinux role label that applies to
                            the container.
                          type: string
                        type:
                          description: Type is a SELinux type label that applies to
                            the container.
                          type: string
                        user:
                          description: User is a SELinux user label that applies to
                            the container.
                          type: string
                stdin:
                  description: Whether this container should allocate a buffer for
                    stdin in the container runtime. If this is not set, reads from
                    stdin in the container will always result in EOF. Default is false.
                  type: boolean
                stdinOnce:
                  description: Whether the container runtime should close the stdin
                    channel after it has been opened by a single attach. When stdin
                    is true the stdin stream will remain open across multiple attach
                    sessions. If stdinOnce is set to true, stdin is opened on container
                    start, is empty until the first client attaches to stdin, and
                    then remains open and accepts data until the client disconnects,
                    at which time stdin is closed and remains closed until the container
                    is restarted. If this flag is false, a container processes that
                    reads from stdin will never receive an EOF. Default is false
                  type: boolean
                terminationMessagePath:
                  description: 'Optional: Path at which the file to which the container''s
                    termination message will be written is mounted into the container''s
                    filesystem. Message written is intended to be brief final status,
                    such as an assertion failure message. Will be truncated by the
                    node if greater than 4096 bytes. The total message length across
                    all containers will be limited to 12kb. Defaults to /dev/termination-log.
                    Cannot be updated.'
                  type: string
                terminationMessagePolicy:
                  description: Indicate how the termination message should be populated.
                    File will use the contents of terminationMessagePath to populate
                    the container status message on both success and failure. FallbackToLogsOnError
                    will use the last chunk of container log output if the termination
                    message file is empty and the container exited with an error.
                    The log output is limited to 2048 bytes or 80 lines, whichever
                    is smaller. Defaults to File. Cannot be updated.
                  type: string
                tty:
                  description: Whether this container should allocate a TTY for itself,
                    also requires 'stdin' to be true. Default is false.
                  type: boolean
                volumeDevices:
                  description: volumeDevices is the list of block devices to be used
                    by the container. This is a beta feature.
                  type: array
                  items:
                    description: volumeDevice describes a mapping of a raw block device
                      within a container.
                    type: object
                    required:
                    - devicePath
                    - name
                    properties:
                      devicePath:
                        description: devicePath is the path inside of the container
                          that the device will be mapped to.
                        type: string
                      name:
                        description: name must match the name of a persistentVolumeClaim
                          in the pod
                        type: string
                volumeMounts:
                  description: Pod volumes to mount into the container's filesystem.
                    Cannot be updated.
                  type: array
                  items:
                    description: VolumeMount describes a mounting of a Volume within
                      a container.
                    type: object
                    required:
                    - mountPath
                    - name
                    properties:
                      mountPath:
                        description: Path within the container at which the volume
                          should be mounted.  Must not contain ':'.
                        type: string
                      mountPropagation:
                        description: mountPropagation determines how mounts are propagated
                          from the host to container and the other way around. When
                          not set, MountPropagationNone is used. This field is beta
                          in 1.10.
                        type: string
                      name:
                        description: This must match the Name of a Volume.
                        type: string
                      readOnly:
                        description: Mounted read-only if true, read-write otherwise
                          (false or unspecified). Defaults to false.
                        type: boolean
                      subPath:
                        description: Path within the volume from which the container's
                          volume should be mounted. Defaults to "" (volume's root).
                        type: string
                workingDir:
                  description: Container's working directory. If not specified, the
                    container runtime's default will be used, which might be configured
                    in the container image. Cannot be updated.
                  type: string
            params:
              description: Params is an optional set of parameters which must be supplied
                by the user when a Condition is evaluated
              type: array
              items:
                description: ParamSpec defines arbitrary parameters needed beyond
                  typed inputs (such as resources). Parameter values are provided
                  by users as inputs on a TaskRun or PipelineRun.
                type: object
                required:
                - name
                properties:
                  default:
                    description: Default is the value a parameter takes if no input
                      value is supplied. If default is set, a Task may be executed
                      without a supplied value for the parameter.
                    type: object
                    required:
                    - type
                    properties:
                      type:
                        description: ParamType indicates the type of an input parameter;
                          Used to distinguish between a single string and an array
                          of strings.
                        type: string
                  description:
                    description: Description is a user-facing description of the parameter
                      that may be used to populate a UI.
                    type: string
                  name:
                    description: Name declares the name by which a parameter is referenced.
                    type: string
                  type:
                    description: Type is the user-specified type of the parameter.
                      The possible types are currently "string" and "array", and "string"
                      is the default.
                    type: string
            resources:
              description: Resources is a list of the ConditionResources required
                to run the condition.
              type: array
              items:
                description: ResourceDeclaration defines an input or output PipelineResource
                  declared as a requirement by another type such as a Task or Condition.
                  The Name field will be used to refer to these PipelineResources
                  within the type's definition, and when provided as an Input, the
                  Name will be the path to the volume mounted containing this PipelineResource
                  as an input (e.g. an input Resource named `workspace` will be mounted
                  at `/workspace`).
                type: object
                required:
                - name
                - type
                properties:
                  name:
                    description: Name declares the name by which a resource is referenced
                      in the definition. Resources may be referenced by name in the
                      definition of a Task's steps.
                    type: string
                  optional:
                    description: 'Optional declares the resource as optional. By default
                      optional is set to false which makes a resource required. optional:
                      true - the resource is considered optional optional: false -
                      the resource is considered required (equivalent of not specifying
                      it)'
                    type: boolean
                  targetPath:
                    description: TargetPath is the path in workspace directory where
                      the resource will be copied.
                    type: string
                  type:
                    description: Type is the type of this resource;
                    type: string
